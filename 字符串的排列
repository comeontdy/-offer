题目描述
输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。

思想：递归法，问题转换为先固定第一个字符，求剩余字符的排列；求剩余字符排列时跟原问题一样。
(1) 遍历出所有可能出现在第一个位置的字符（即：依次将第一个字符同后面所有字符交换）；
(2) 固定第一个字符，求后面字符的排列（即：在第1步的遍历过程中，插入递归进行实现）。
需要注意的几点：
(2) 形如 aba 或 aa 等特殊测试用例的情况，vector在进行push_back时是不考虑重复情况的，需要自行控制；
(3) 输出的排列可能不是按字典顺序排列的，可能导致无法完全通过测试用例，考虑输出前排序，或者递归之后取消复位操作。

# -*- coding:utf-8 -*-
class Solution:
    def Permutation(self, ss):
        # write code here
        res = []
        if not ss:
            return res
        self.helper(ss,0,res)
        res.sort()
        return res
    
    def swap(self,string,a,b):
        res = list(string)
        tmp = res[a]
        res[a] = res[b]
        res[b] = tmp
        return ''.join(res)
    
    def helper(self,s,i,res):
        if i == len(s)-1:
            if s not in res:
                res.append(s)
        else:
            tmp = set()
            for j in range(i,len(s)):
                if j == i or j not in tmp:
                    tmp.add(j)
                    s = self.swap(s,i,j)
                    self.helper(s,i+1,res)
                    s = self.swap(s,j,i)
