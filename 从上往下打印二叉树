题目描述
从上往下打印出二叉树的每个节点，同层节点从左至右打印。

思路：宽度优先搜索 
借助辅助列表，将每一个的子节点按照顺序append到一个list
每次从list中取第一个来分裂

# -*- coding:utf-8 -*-
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    # 返回从上到下每个节点值列表，例：[1,2,3]
    def PrintFromTopToBottom(self, root):
        # write code here
        temp = []
        res = []
        if not root:
            return []
        temp.append(root)
        while temp:
            tmp = temp[0]
            temp.remove(tmp)
            if tmp.left:
                temp.append(tmp.left)
            if tmp.right:
                temp.append(tmp.right)
            res.append(tmp.val)
        return res
